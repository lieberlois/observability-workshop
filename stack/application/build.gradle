plugins {
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'org.springframework.boot' version '2.6.1' apply false
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
}

subprojects {
    sourceCompatibility = '11'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'groovy'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2021.0.0"
            mavenBom "org.springframework.boot:spring-boot-dependencies:2.6.1"
        }
    }

    dependencies {
        // spring
        implementation 'org.springframework.boot:spring-boot-starter-actuator:2.6.1'
        implementation 'org.springframework.boot:spring-boot-starter-data-rest:2.6.1'

        // commons
        implementation 'commons-io:commons-io:2.11.0'
        implementation 'org.apache.commons:commons-lang3:3.12.0'

        // logs
        implementation 'net.logstash.logback:logstash-logback-encoder:7.0.1'
        implementation 'ch.qos.logback:logback-classic:1.2.7'
        implementation 'ch.qos.logback:logback-core:1.2.7'
        // metrics
        implementation 'io.micrometer:micrometer-core:1.8.0'
        implementation 'io.micrometer:micrometer-registry-prometheus:1.8.0'
        // traces
        implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:3.1.0'
        implementation 'org.springframework.cloud:spring-cloud-starter-zipkin:2.2.8.RELEASE'

        // events
        implementation 'io.honeycomb.beeline:beeline-spring-boot-starter:1.6.1'

        testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.1'
        testImplementation "org.spockframework:spock-core:2.0-groovy-3.0"
        testImplementation "org.spockframework:spock-spring:2.0-groovy-3.0"
    }

    test {
        useJUnitPlatform()
    }
}

task resolveDependencies(group: "build setup", description: "Resolve and prefetch dependencies") {
    doLast {
        def resolve = {
            ConfigurationContainer configurations ->
                configurations
                        .findAll({ Configuration c -> c.isCanBeResolved() })
                        .each({ c -> c.resolve() })
        }
        project.rootProject.allprojects.each { subProject ->
            resolve(subProject.buildscript.configurations)
            resolve(subProject.configurations)
        }
    }
}